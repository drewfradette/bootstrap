let has_vundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')

if !filereadable(vundle_readme)
  echo "Installing Vundle"
  echo ""
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
  let has_vundle=0
endif

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Bundles
Bundle 'gmarik/vundle'

"Bundle 'Markdown'
Bundle 'The-NERD-tree'
Bundle 'taglist.vim'
Bundle 'snipMate'
"Bundle 'ZoomWin'
Bundle 'github-theme'
Bundle 'ack.vim'
Bundle 'Lucius'
Bundle 'jellybeans.vim'
Bundle 'go.vim'
Bundle 'grep.vim'

Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-rvm'
Bundle 'jtratner/vim-flavored-markdown'
Bundle 'scrooloose/syntastic'
Bundle 'scrooloose/nerdcommenter'
Bundle 'drewfradette/vim-irblack'
Bundle 'altercation/vim-colors-solarized'
Bundle 'vim-ruby/vim-ruby'
Bundle 'rodjek/vim-puppet'
Bundle 'kien/ctrlp.vim'
Bundle 'drewfradette/vim-distinguished'
Bundle 'tpope/vim-fugitive'
Bundle 'wikitopian/hardmode'
Bundle 'bling/vim-airline'
Bundle 'mattn/gist-vim'
Bundle 'mattn/webapi-vim'
Bundle 'kchmck/vim-coffee-script'

if has_vundle == 0
  echo "Installing bundles"
  echo ""
  :BundleInstall
endif

set nocompatible
set background=dark

filetype plugin indent on

syntax on

colorscheme jellybeans
cd ~/src

" Just make it somewhat sane defaults
set bs=indent,eol,start         " allow backspacing over everything in insert mode
set number                      " turn on line numbers
set ruler                       " show the cursor position all the time
set viminfo='20,\"50            " read/write a .viminfo file, don't store more than 50 lines of registers
set history=50                  " keep 50 lines of command line history
set hlsearch                    " Turn on highlighting for search
set nowrap                      " Don't wrap the text
set tabstop=2                   " The number of spaces a tab character should use.
set expandtab                   " Use the appropriate number of spaces to insert a tab.
set shiftwidth=2                " Number of spaces to use for each step of auto-indenting
set smartindent                 " Attempt to do smart indenting.
set listchars=trail:‧,tab:→\    " Define the character's to show for trailing spaces and tabs.
set list                        " Show the characters defined in listchars
set colorcolumn=120             " Display print margin at 120 characters
set laststatus=2                " Always show the status bar now that vim-powerline made it awesome.
set nomousehide
set undodir=~/.vim/undo//       " Persistent Undo folder
set undofile                    " Enable persistent undo
set dir=~/.vim/swp//            " Fixed location for swp files
set foldenable                  " Enable folds
set foldmethod=syntax           " syntax
set foldlevel=999
set bufhidden=delete
set ut=6000
set ssop-=options               " Don't save vimrc to sessions


let mapleader="\<Space>"

" Leader Actions
nnoremap <Leader>o :CtrlP<CR>
nnoremap <Leader>w :w<CR>
nmap <Leader><Leader> V

" Quicker Global Registry shortcuts
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

map <silent> <F2> :NERDTreeToggle<CR>
map <silent> <F3> :TlistToggle<CR>
map <silent> <C-s> :NERDTreeFind<CR>
map <silent> <C-f> :normal gg=G<CR>

nnoremap  <Tab>       <C-w><C-w>
nnoremap  <A-Right>   <C-w><Right>
nnoremap  <A-Left>    <C-w><Left>
nnoremap  <A-Up>      <C-w><Up>
nnoremap  <A-Down>    <C-w><Down>
nnoremap  <C-Tab>     :normal gt<CR>
nnoremap  <C-S-Tab>   :normal gT<CR>
nnoremap  <A-]>       <C-w><C-]>
nnoremap <C-Space>    :normal za<CR>

autocmd FileType php,phtml,js,css,rb,gemspec,ru,pp,ruby,erb autocmd BufWritePre <buffer> :call StripTrailingWhitespaces()
autocmd FileType php,phtml,js,css,rb,gemspec,ru,pp,ruby,erb autocmd BufWritePre <buffer> :call AutoFormat()
autocmd FileType gitcommit autocmd BufWritePre <buffer> :call GusFormat()
autocmd BufRead,BufNewFile *.pp setlocal filetype=puppet

au cursorHoldI * stopinsert

" Ruby stuff
autocmd FileType ruby autocmd BufRead Rvm use default

" Go Magic
set rtp+=$GOROOT/misc/vim

""""""""""""""""""
" Gist Specifics "
""""""""""""""""""
let g:gist_post_private = 1
let g:gist_show_privates = 1
let g:fist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

""""""""""""""""""""""
" NERDTree specifics "
""""""""""""""""""""""
" If NERDTree is the only window left open, close vim.
let NERDTreeMinimalUI=1
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endi

""""""""""""""""""
" Netrw Settings "
""""""""""""""""""
let g:netrw_liststyle=3     " Tree mode as default view
let g:netrw_browse_split=4  " Open file in previous buffer
let g:netrw_preview=1       " Preview window shown in a vsplit
let g:netrw_winsize=12      " netrw width (%)

""""""""""""""""""""""
" Powerline Settings "
""""""""""""""""""""""
"let g:Powerline_symbols = 'fancy'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0

""""""""""""""""""""""
" Syntastic Settings "
""""""""""""""""""""""
let g:syntastic_python_checkers=['flake8']
let g:syntastic_python_flake8_args='--ignore=E111,E302,E231'


"""""""""""""""""""""""""
" Tlist Plugin Settings "
"""""""""""""""""""""""""
let Tlist_Auto_Update=1
let Tlist_Compact_Format=1
let Tlist_Exit_OnlyWindow=1
let Tlist_File_Fold_Auto_Close=1

fun! NumberToggle()
  if (&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc

fun! StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  s/\s\+$//e
  call cursor(l,c)
endfun

fun! GusFormat()
 let l = line(".")
 let c = col(".")
 :call search("a07B")
 :normal ve"gy
 :call search("apex")
 :normal d$
 :normal "gp
 call cursor(l,c)
endfun

fun! AutoFormat()
  let l = line(".")
  let c = col(".")
  :normal gg=G
  call cursor(l,c)
endfun

function! Wipeout()
  " list of *all* buffer numbers
  let l:buffers = range(1, bufnr('$'))

  " what tab page are we in?
  let l:currentTab = tabpagenr()
  try
    " go through all tab pages
    let l:tab = 0
    while l:tab < tabpagenr('$')
      let l:tab += 1

      " go through all windows
      let l:win = 0
      while l:win < winnr('$')
        let l:win += 1
        " whatever buffer is in this window in this tab, remove it from
        " l:buffers list
        let l:thisbuf = winbufnr(l:win)
        call remove(l:buffers, index(l:buffers, l:thisbuf))
      endwhile
    endwhile

    " if there are any buffers left, delete them
    if len(l:buffers)
      execute 'bwipeout' join(l:buffers)
    endif
  finally
    " go back to our original tab page
    execute 'tabnext' l:currentTab
  endtry
endfunction

" Super handy
cmap w!! w !sudo tee > /dev/null %
nnoremap <C-n> :call NumberToggle()<cr>

" A nice remap
nnoremap ; :

set guifont="Droid Sans Mono for Powerline"

if !empty($TMUX) || !empty($SSH_CLIENT)
  colorscheme jellybeans
  set background=dark
  let g:airline_powerline_fonts = 0
endif

augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END
